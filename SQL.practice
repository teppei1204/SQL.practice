## SQLって何？

**SQL** (Structured Query Language)  
構造化問い合わせ言語

### SQLのイメージ
- **データベース** = データを保管する場所  
- データベースに対して、**保管**、**取得**、**更新**、**削除**を行うのがSQLです。

### どうデータを保管している？
- **データベース**
  - **テーブル** (表形式でデータを管理しているもの)
  
  **※イメージ**
  - **データベース** (図書館の書庫)
  - **テーブル** (書庫の棚)
  - **データ** (本)

### SQLで何ができる？
- データの**保管**、**取得**、**更新**、**削除**
- テーブルの**作成**、**更新**、**削除**
- アプリ開発時にデータベースを**操作**できる
- データ分析して**ビジネス活動を改善**

## SELECT FROM

- **表**のことを**テーブル**
- **行**のことを**カラム**
- **列**のことを**レコード**

### Q. 名前と特徴の取得

**one piece**

| name   | fruit   | feature |
|--------|---------|---------|
| ルフィ | ヒトヒト | 自由    |
| ゾロ   | 無し    | 方向音痴 |
| ブルック | ヨミヨミ | 骨     |
| サンジ | 無し    | ぐる眉  |

```sql
SELECT name, feature  -- カラム名
FROM one_piece;       -- テーブル名


| name   | feature |
| ルフィ  |   自由   |
|  ゾロ   | 方向音痴  |
|ブルック| |    骨    |
| サンジ |   ぐる眉  |

SQLを理解するコツ
元々どういう表があって、そこから新たにどういう表のデータを取ってきたいか、どういう表を作りたいかを考える（例：SELECT 列1, 列3）

カラム名の変更
  SELECT name AS '名前', feature AS '特徴'
FROM one_piece;

  AS:カラム名を変更

|  名前   |   特徴   |
| ルフィ  |   自由   |
|  ゾロ   | 方向音痴  |
|ブルック| |    骨    |
| サンジ |   ぐる眉  |

  SELECT *
    FROM one piece;
  *:全カラムを指定

| name  |  fruit  | feature |
| ルフィ | ヒトヒト |   自由   |
|  ゾロ  |  無し   | 方向音痴  |
|ブルック| ヨミヨミ |    骨    |
| サンジ |  無し   |   ぐる眉  |

Q//悪魔の実の一覧を取得(重複なし)

SELECT fruit
  FROM one piece;だと重複してしまう

|  fruit  |
| ヒトヒト |
|  無し   |
| ヨミヨミ |
|  無し   |

SELECT DISTINCT(fruit)
 FROM one piece;
  DISTINCT:重複削除

|  fruit  |
| ヒトヒト |
|  無し   |
| ヨミヨミ |

Q//可愛いが5より大きいキャラの名前と可愛いを取得

Pokémon
|  name  | kawaii | role |
|  プリン |   4    | 弱い |
| サイドン |   1   |  |
|ピカチュウ|   6    | 弱い |
|  ミュウ |   10   | 万能 |

SELECT name, kawaii
  FROM Pokémon
WHERE kawaii > 5;
  WHERE:条件指定

|  name  | kawaii |
|ピカチュウ|   6    |
|  ミュウ |   10   |
WHEREは条件に合ったレコードを取るイメージ

Q//可愛いが5より大きいroleが弱いレコードを取得

SELECT *
  FROM Pokémon
WHERE kawaii > 5 AND role = '弱い';
  AND:両方満たす

|  name  | kawaii | role |
|ピカチュウ|   6    | 弱い |

Q// 可愛いが5より大きいかroleが弱いのレコードを取得

SELECT *
  FROM Pokémon
WHERE kawaii > 5 OR role = '弱い';
  OR:どちらか満たす

Q///可愛いが4〜6のキャラのレコードを取得

SELECT *
  FROM Pokémon
WHERE kawaii BETWEEN 4 AND 6;
  BETWEEN:~の間

|  name  | kawaii | role |
|  プリン |   4    | 弱い |
|ピカチュウ|   6    | 弱い |

Q//役割が弱いか万能のレコードを取得

SELECT *
  FROM Pokémon
WHERE kawaii IN ('弱い','万能');
  IN:まとめて指定
  NOT IN:まとめて否定

|  name  | kawaii | role |
|  プリン |   4    | 弱い |
|ピカチュウ|   6    | 弱い |
|  ミュウ |   10   | 万能 |

Q//名前が「ミ」から始まるレコードを取得

SELECT *
  FROM Pokémon
WHERE name LIKE 'ミ%';
  LIKE:あいまい検索

|  name  | kawaii | role |
|  ミュウ |   10   | 万能 |

Q//roleが空のレコードを取得

SELECT *
  FROM Pokémon
WHERE role IS NULL;
  NULL:値が不明
  IS NULL:NULL指定
  IS NOT NULL:NULLじゃない

|  name  | kawaii | role |
| サイドン |   1   |  |

Q//Pokémonテーブルのうち、レコードを2行だけ取得

SELECT *
  FROM Pokémon
  LIMIT 2;LIMIT:行数上限指定
  SQLを書く際、データが多すぎると実行が遅くなったりフリーズしたりする

|  name  | kawaii | role |
|  プリン |   4    | 弱い |
| サイドン |   1   |  |

Q//可愛いの昇順で並び替え

SELECT *
  FROM Pokémon
ORDER BY kawaii;
  ORDER BY:並び替え

|  name  | kawaii | role |
| サイドン |   1   |  |
|  プリン |   4    | 弱い |
|ピカチュウ|   6    | 弱い |
|  ミュウ |   10   | 万能 |

SELECT *
  FROM Pokémon
ORDER BY kawaii DESC;
  DESC:降順

|  name  | kawaii | role |
|  ミュウ |   10   | 万能 |
|ピカチュウ|   6    | 弱い |
|  プリン |   4    | 弱い |
| サイドン |   1   |  |

・SQLを書く上での秘訣
  予約語(SELECT,WHERE,etc)は大文字
  特定の予約語(SELECT,WHERE,ORDER BY,etc)の後は改行しよう
  SELECTで列名指定,LIMITすると速くなる

## GROUP BY

- データの集計に必須
- エラーが続出する原因
- 今後GROUP BYで悩むことがなくなる

### 手作業時代

鬼「今週の日毎の会員登録数よこせ」

**members**

| name     | created_day | channel | age |
|----------|-------------|---------|-----|
| 蕪木太郎 | 2025-03-15  | web     | 31  |
| 蕪木二郎 | 2025-03-15  | ad      | 31  |
| 蕪木三郎 | 2025-03-17  | ad      | 31  |
| 蕪木四郎 | 2025-03-17  | ad      | 32  |
| 蕪木五郎 | 2025-03-18  | web     | 33  |

```sql
SELECT COUNT(name)
FROM members
WHERE created_day = '2025-03-15';
          ⇩
       COUNT 2
COUNTのイメージ:レコード数を数えたい時に使う

鬼「次は昨年の日毎の会員登録数よこせ」

SELECT created_day, COUNT(name)
  FROM members
GROUP BY created_day;
  GROUP BY:同じ値でまとめる

| created_day | count |
|  2025-03-15  |2|
|  2025-03-17  |2|
|  2025-03-18  |1|

GROUP BYのイメージ:複数のデータごとに集計したい時に使う

鬼「置いとけ。次は日毎の会員登録数をチャンネルごとに出せ」

SELECT created_day, channel, COUNT(name)
 FROM members
 GROUP BY created_day;

 ！！これはエラーになる！！

| created_day | channel |
|  2025-03-15  |   ?   |//どの値を入れればいいか分からない
|  2025-03-17  |  ad   |
|  2025-03-18  |  web  |

SELECT created_day, channel, COUNT(name)
 FROM members
 GROUP BY created_day,channel;

| created_day | channel |count|
|  2025-03-15  |  web   |1|
|  2025-03-15  |  ad    |1|
|  2025-03-17  |  ad    |2|
|  2025-03-18  |  web   |1|
軸になるカラムを全てGROUP BYで指定。
なんの値が入るかをSQLが特定できるようにする

## 集計関数

- **値を集計する**
  - `COUNT`: レコード数
  - `AVG`: 平均
  - `MAX`: 最大値
  - `MIN`: 最小値
  - `SUM`: 合計

### 鬼「遅い。日毎の会員登録者の平均年齢と最大年齢を出せ」

**members**

| name     | created_day | channel | age |
|----------|-------------|---------|-----|
| 蕪木太郎 | 2025-03-15  | web     | 31  |
| 蕪木二郎 | 2025-03-15  | ad      | 31  |
| 蕪木三郎 | 2025-03-17  | ad      | 31  |
| 蕪木四郎 | 2025-03-17  | ad      | 32  |
| 蕪木五郎 | 2025-03-18  | web     | 33  |

```sql
SELECT created_day, AVG(age), MAX(age)
FROM members
GROUP BY created_day;


| created_day | avg |Max|
|  2025-03-15  |  31 |31|
|  2025-03-17  |  31 |31|
|  2025-03-18  |  33 |33|


## テーブル結合(INNER/OUTER JOIN)

- 複数テーブルのデータを一度に取得するには？
- JOINはSQLにおいて必須

### 宇宙人「火星人の渡航歴を10分以内に出せ。じゃないとクビだ」

**martians**
| id|     name     |
| 1 |     ハリー    |
| 2 |  ハーマイオニー |
| 3 |      ロン     |
| 4 |   ダンブルドア  |
| 5 |  ヴォルデモート  |

**histories**
| id | martians_id | planet |
| 1 |       3      |  地球  |
| 2 |       1      |  木星  |
| 3 |       4      |  土星  |
| 4 |       5      |  海王星 |

JOIN

| id|     name     | id| martians_id | planet |
| 1 |     ハリー    | 2|       1      |  木星  |
| 2 |      ロン     | 1|       3      |  地球  |
| 3 |   ダンブルドア | 3|       4      |  土星  |
| 4 | ヴォルデモート | 4|       5      | 海王星  |

SELECT *
  FROM martians AS m
INNER JOIN histories AS h ON m.id = h.martians_id;

histories → 結合したいテーブル
m.id = h.martians_id → 結合条件

### 宇宙人「渡航したやつの名前と渡航先だけだせ」

SELECT m.name, h.planet
  FROM martians AS m
INNER JOIN histories AS h ON m.id = h.martians_id;

|     m.name     | h.planet |
|      ハリー     |   木星    |
|       ロン     |    地球   |
|   ダンブルドア   |    土星   |
|  ヴォルデモート  |   海王星   |

宇宙人「惑星渡航歴のないやつの名前が消えているぞ」

※条件にマッチするレコードがないものは削除される※
(ハーマイオニーが削除されている)

SELECT m.name, h.planet
  FROM martians AS m
  LEFT OUTER JOIN histories AS h
    ON m.id = h.martians_id;

|     m.name     | h.planet |
|      ハリー     |   木星    |
|  ハーマイオニー  |   null   |
|       ロン     |    地球   |
|   ダンブルドア   |    土星   |
|  ヴォルデモート  |   海王星   |

INNER JOIN   内部結合
  ベン図でいうところの合わさった部分のデータを取れる
  条件にマッチしたデータだけ欲しい時
  こっちの方が多様

|     m.name     | h.planet |
|      ハリー     |   木星    |
|       ロン     |    地球   |

LEFT OUTER JOIN   外部結合
  ベースとなるテーブルの全データと結合したデータのうちの条件にマッチしたデータが取れる
  条件に合わないデータも欲しい時

|     m.name     | h.planet |
|      ハリー     |   木星    |
|  ハーマイオニー  |   null   |
|       ロン     |    地球   |


## CASE式 (〇〇なら××の処理を行う)

```sql
SELECT CASE WHEN 条件 THEN 値
            WHEN 条件 THEN 値
            ELSE 値 END
FROM テーブル名;


SQLで条件分岐を実現するのがCASE式
複雑な条件のSQLもスッキリ書けるようになる

Q「関西などのエリアごとの人口出して」

populations
| pref_name  | population |
|    京都    |    300     |
|    大阪    |    900     |
|    福岡    |    500     |
|    佐賀    |    100     |

手順
①
populations
| pref_name  | population |
|    京都    |    300     |
|    大阪    |    900     |
|    福岡    |    500     |
|    佐賀    |    100     |

②
SELECT
  CASE WHEN pref_name IN ('京都','大阪') THEN '関西'
  WHEN pref_name IN ('福岡','佐賀') THEN '九州'
  ELSE NULL
  END AS district,
  population
FROM
  populations;

| district | population |
|    関西   |    300     |
|    関西   |    900     |
|    九州   |    500     |
|    九州   |    100     |

③
SELECT
  CASE WHEN pref_name IN ('京都','大阪') THEN '関西'
  WHEN pref_name IN ('福岡','佐賀') THEN '九州'
  ELSE NULL
  END AS district,
  SUM(population) AS population  -- population の合計を求める
FROM
  populations
GROUP BY
  CASE WHEN pref_name IN ('京都','大阪') THEN '関西'
  WHEN pref_name IN ('福岡','佐賀') THEN '九州'
  ELSE NULL
  END;

| district | population |
|    関西   |    1200    |
|    九州   |    600     |

・CASE式の使い所
  単体で使っても条件分岐できて便利
  分析用の分類単位で集計したいときに、集約関数(SAM)とGROUP BY句と一緒に使うことで大活躍
  条件に応じて集計したい時はCASE式
  SQL初心者から中級者へ


・## サブクエリ (クエリの中のクエリ)

サブクエリとは、クエリの中に別のクエリを含めることです。  
クエリをネストすることで、より複雑な条件や集計を実行できます。

### Q. 平均価格以上の商品を出す

#### items テーブル

| name       | category | price  |
|------------|----------|--------|
| iPhone16   | スマホ   | 100,000|
| pixel 5    | スマホ   | 80,000 |
| Xperia6    | スマホ   | 90,000 |
| ルンバ980  | 掃除機   | 50,000 |
| DysonV11   | 掃除機   | 40,000 |
| バルミューダC| 掃除機 | 60,000 |

#### 手順

1. **全商品の平均価格を取得**

```sql
SELECT AVG(price)
  FROM items;

//70,000

SELECT *
  FROM items
WHERE price >= 70000;

|   name   | category | price |
| iPhone16 |  スマホ   | 100,000|
|  pixel 5 |  スマホ   | 80,000|
|  Xperia6 |  スマホ   | 90,000|

上記の書き方も良いが...
⬇️この書き方がいい⬇️
SELECT *
  FROM items
WHERE piece >= (SELECT AVG(piece)
                  FROM items);
⬆️この書き方が良い⬆️

(SELECT AVG(piece)
    FROM items);
    ⬇️クエリ内のクエリ = サブクエリ
  70000;

Q「カテゴリーごとに平均価格以上の商品を出して」

SELECT *
  FROM items
WHERE piece >= (SELECT AVG(piece)
                  FROM items
                GROUP BY category);
この書き方だと90000,50000の2行の結果が返ってくるのでエラーになる

SELECT *
  FROM items AS i1
WHERE piece >= (SELECT AVG(piece)
                  FROM items AS i2
                WHERE i1.category = i2.category//相関サブクエリ
                GROUP BY category);
考え方
SELECT * FROM items WHERE 100000 >= 90000;○
SELECT * FROM items WHERE 80000 >= 90000;
SELECT * FROM items WHERE 90000 >= 90000;○
SELECT * FROM items WHERE 50000 >= 50000;○
SELECT * FROM items WHERE 40000 >= 50000;
SELECT * FROM items WHERE 60000 >= 50000;○

|   name   | category | price |
| iPhone16 |  スマホ   | 100,000|
|  Xperia6 |  スマホ   | 90,000|
| ルンバ980 |  掃除機   | 50,000|
|バルミューダC| 掃除機   | 60,000|

・サブクエリを使う上での注意
  重いし複雑   使わなくて済むなら使わなくてOK
  二段階以上の集計を行う場合   使わざるを得ない
  実際に実行されているSQL文を書いてみるとイメージ湧いて使いこなせる